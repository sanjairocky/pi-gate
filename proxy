#!/usr/bin/env node

const https = require("https");
const fs = require("fs");
const http = require("http");
const path = require("path");
const httpProxy = require("http-proxy");

const PORT = process.env.PORT || 443;
const cert = process.env.CERT_LOC || path.join("/secrets", "cert");
const servers_location = process.env.SERVERS_LOC || "./servers.json";

// Creating object of key and certificate
// for SSL
const options = {
  key: fs.readFileSync(path.join(cert, "cert.key")),
  cert: fs.readFileSync(path.join(cert, "cert.crt")),
};

const proxy = httpProxy.createProxyServer(); // See (â€ )

const servers = require(servers_location);

const getServer = (req) => {
  let domain = req.headers.host,
    subDomain = domain.split(".");

  if (subDomain.length > 2) {
    subDomain = subDomain[0];
  } else {
    subDomain = "Everyone ";
  }

  console.log(`Request received from ${subDomain} at ${new Date()}`);

  if (!servers[subDomain]) {
    console.log(`Unknown -  ${req.method} ${req.url}`);
    throw new Error("Unknown subdomain");
  }
  return { subDomain, ...servers[subDomain] };
};

function onRequest(client_req, client_res) {
  try {
    const { subDomain, host, port } = getServer(client_req);
    console.log(
      `${subDomain} -  ${client_req.method} http://${host}:${port}${client_req.url}`
    );

    proxy.web(client_req, client_res, {
      target: `http://${host}:${port}`,
      ws: true,
      changeOrigin: true,
    });
  } catch (error) {
    console.log(error);
    client_res.writeHead(404, { "Content-Type": "text/plain" });
    client_res.write("404 Application Not Found\n");
    client_res.end();
  }
}

// Listen for the `error` event on `proxy`.
proxy.on("error", function (err, req, res) {
  res.writeHead(500, { "Content-Type": "text/plain" });
  res.write("Application Error\n");
  res.end();
});

// Create the HTTPS proxy server in front of a HTTP server

const server = https.createServer(options, onRequest);

server.on("upgrade", function (req, socket, head) {
  const { host, port } = getServer(req);
  proxy.ws(req, socket, head, {
    target: `http://${host}:${port}`,
    ws: true,
    changeOrigin: true,
  });
});

server.listen(PORT, function () {
  console.log("Server started at port " + PORT);
});
